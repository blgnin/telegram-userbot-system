import asyncio
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT1_TOKEN, CHAT_ID, BOT1_NAME
from ai_handler import AIHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleBot:
    def __init__(self):
        self.ai_handler = AIHandler()
        
    async def start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            await update.message.reply_text("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ GOMINIAPP.")
            logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ start_command: {e}")
    
    async def handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message_text = update.message.text
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ AI
            response = await self.ai_handler.generate_response(
                message_text, 
                BOT1_NAME,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}"
            )
            
            await update.message.reply_text(f"ü§ñ {BOT1_NAME}: {response}")
            logger.info("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

def check_event_loop():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ event loop"""
    try:
        loop = asyncio.get_event_loop()
        print(f"‚úÖ Event loop –Ω–∞–π–¥–µ–Ω: {loop}")
        print(f"   –ó–∞–ø—É—â–µ–Ω: {loop.is_running()}")
        print(f"   –ó–∞–∫—Ä—ã—Ç: {loop.is_closed()}")
        return loop
    except RuntimeError as e:
        print(f"‚ùå Event loop –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return None

async def test_application():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Application –±–µ–∑ run_polling"""
    try:
        print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º Application...")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
        bot = SimpleBot()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = Application.builder().token(BOT1_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", bot.start_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
        
        print("‚úÖ Application —Å–æ–∑–¥–∞–Ω")
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã Application
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã Application:")
        print(f"   - app.bot: {app.bot}")
        print(f"   - app.updater: {app.updater}")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∑ run_polling
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º updater.start_polling()...")
        await app.updater.start_polling()
        
        print("‚úÖ Updater –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(5)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        await app.updater.stop()
        print("‚úÖ Updater –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –û—Ç–ª–∞–¥–∫–∞ Application...")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º event loop
    loop = check_event_loop()
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        new_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(new_loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        new_loop.run_until_complete(test_application())
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            new_loop.close()
        except:
            pass

if __name__ == "__main__":
    main() 