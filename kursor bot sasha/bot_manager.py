import asyncio
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT1_TOKEN, BOT2_TOKEN, CHAT_ID, BOT1_NAME, BOT2_NAME
from ai_handler import AIHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BotManager:
    def __init__(self):
        try:
            self.bot1 = Bot(token=BOT1_TOKEN)
            self.bot2 = Bot(token=BOT2_TOKEN)
            self.ai_handler = AIHandler()
            self.conversation_active = False
            self.current_speaker = None
            logger.info(f"‚úÖ –ë–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {BOT1_NAME}, {BOT2_NAME}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–æ–≤: {e}")
            raise
        
    async def start_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            if self.conversation_active:
                await update.message.reply_text("üîÑ –†–∞–∑–≥–æ–≤–æ—Ä —É–∂–µ –∏–¥–µ—Ç!")
                return
            
            logger.info("üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –æ GOMINIAPP...")
            self.conversation_active = True
            self.current_speaker = BOT1_NAME
            self.ai_handler.clear_history()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞ (–≤–æ–¥–∏—Ç–µ–ª—è)
            initial_message = await self.ai_handler.generate_response(
                "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–æ–¥–∏—Ç–µ–ª—å –≤ GOMINIAPP. –ù–µ–¥–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –û—á–µ–Ω—å —É–¥–æ–±–Ω–æ - –Ω–∏–∫–∞–∫–∏—Ö –∫–æ–º–∏—Å—Å–∏–π, –≥–∏–±–∫–∏–µ —Ü–µ–Ω—ã, –∏ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã GO. –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ç–∞–∫–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö?", 
                BOT1_NAME
            )
            
            await update.message.reply_text(initial_message)
            await update.message.reply_text("üéâ –†–∞–∑–≥–æ–≤–æ—Ä –æ GOMINIAPP –Ω–∞—á–∞–ª—Å—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            logger.info("‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
    
    async def stop_conversation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏"""
        try:
            self.conversation_active = False
            await update.message.reply_text("‚èπÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            logger.info("üõë –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    

    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message_text = update.message.text
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {message_text}")
            
            # –ï—Å–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –µ–≥–æ
            if not self.conversation_active:
                self.conversation_active = True
                self.current_speaker = BOT1_NAME
                self.ai_handler.clear_history()
                await update.message.reply_text("üéâ –†–∞–∑–≥–æ–≤–æ—Ä –æ GOMINIAPP –Ω–∞—á–∞–ª—Å—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å
            if self.current_speaker == BOT1_NAME:
                bot_name = BOT2_NAME
                self.current_speaker = BOT2_NAME
            else:
                bot_name = BOT1_NAME
                self.current_speaker = BOT1_NAME
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = await self.ai_handler.generate_response(message_text, bot_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(response)
            
            logger.info(f"üí¨ {bot_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ GOMINIAPP - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    
    async def setup_bot1(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞"""
        try:
            app = Application.builder().token(BOT1_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            app.add_handler(CommandHandler("start", self.start_conversation))
            app.add_handler(CommandHandler("stop", self.stop_conversation))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info(f"‚úÖ {BOT1_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return app
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT1_NAME}: {e}")
            raise
    
    async def setup_bot2(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞"""
        try:
            app = Application.builder().token(BOT2_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            app.add_handler(CommandHandler("start", self.start_conversation))
            app.add_handler(CommandHandler("stop", self.stop_conversation))
            app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info(f"‚úÖ {BOT2_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return app
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT2_NAME}: {e}")
            raise 