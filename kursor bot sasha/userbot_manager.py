import asyncio
import logging
from telethon import TelegramClient, events
from telethon.tl.types import PeerUser, PeerChat
from config import BOT1_TOKEN, BOT2_TOKEN, CHAT_ID, BOT1_NAME, BOT2_NAME
from ai_handler import AIHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class UserBotManager:
    def __init__(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã –¥–ª—è —é–∑–µ—Ä-–±–æ—Ç–æ–≤
            self.client1 = TelegramClient('session1', api_id=2040, api_hash='b18441a1ff607e10a989891a5462e627')
            self.client2 = TelegramClient('session2', api_id=2040, api_hash='b18441a1ff607e10a989891a5462e627')
            
            self.ai_handler = AIHandler()
            self.conversation_active = False
            self.current_speaker = None
            self.last_responses = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
            self.response_times = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–æ–≤
            logger.info(f"‚úÖ –Æ–∑–µ—Ä-–±–æ—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {BOT1_NAME}, {BOT2_NAME}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —é–∑–µ—Ä-–±–æ—Ç–æ–≤: {e}")
            raise
    
    async def start_conversation(self, event):
        """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É —é–∑–µ—Ä-–±–æ—Ç–∞–º–∏"""
        try:
            if self.conversation_active:
                await event.reply("üîÑ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!")
                return
            
            logger.info("üé¨ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —é–∑–µ—Ä-–±–æ—Ç–æ–≤...")
            self.conversation_active = True
            self.current_speaker = BOT1_NAME
            self.ai_handler.clear_history()
            
            await event.reply("üéâ –°–∏—Å—Ç–µ–º–∞ —é–∑–µ—Ä-–±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'Reply' (–æ—Ç–≤–µ—Ç–∏—Ç—å) –≤ Telegram –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await event.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    async def stop_conversation(self, event):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É —é–∑–µ—Ä-–±–æ—Ç–∞–º–∏"""
        try:
            self.conversation_active = False
            await event.reply("‚èπÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            logger.info("üõë –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {e}")
    
    async def handle_message(self, event):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import time
            from datetime import datetime, timedelta
            
            message_text = event.message.text
            sender_id = event.sender_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (Reply)
            is_reply = event.message.reply_to is not None
            
            if is_reply:
                logger.info(f"üë§ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
                logger.info(f"üîç ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {sender_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–æ–≤
                me1 = await self.client1.get_me()
                me2 = await self.client2.get_me()
                logger.info(f"üîç ID –±–æ—Ç–æ–≤: {me1.id}, {me2.id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if not self.conversation_active:
                    logger.info(f"üìù –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    replied_message = await event.get_reply_message()
                    if not replied_message:
                        logger.info(f"üö´ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                    
                                         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: replied_message.sender_id={replied_message.sender_id}, sender_id={sender_id}")
                    if replied_message.sender_id != sender_id:
                        logger.info(f"‚úÖ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")
                    else:
                        logger.info(f"üö´ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å (—Ç–æ—Ç, –∫—Ç–æ –ø–æ–ª—É—á–∏–ª Reply)
                    if replied_message.sender_id == me1.id:  # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
                        bot_name = BOT1_NAME
                    elif replied_message.sender_id == me2.id:  # –ï—Å–ª–∏ Reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞
                        bot_name = BOT2_NAME
                    else:
                        logger.info(f"üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å Reply, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        return
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    if replied_message.text:
                        system_messages = [
                            "üîÑ –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞!",
                            "üéâ –°–∏—Å—Ç–µ–º–∞ —é–∑–µ—Ä-–±–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ë–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 'Reply' (–æ—Ç–≤–µ—Ç–∏—Ç—å) –≤ Telegram –Ω–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                            "‚èπÔ∏è –†–∞–∑–≥–æ–≤–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
                        ]
                        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –±–æ—Ç—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥—É
                        # if replied_message.text in system_messages:
                        #     logger.info(f"üö´ –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
                        #     return
                        
                except Exception as e:
                    logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {e}")
                    return
                
                # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤—ã—à–µ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
                current_time = datetime.now()
                if bot_name in self.response_times:
                    time_diff = current_time - self.response_times[bot_name]
                    if time_diff < timedelta(seconds=30):  # –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
                        logger.info(f"‚è∞ {bot_name} –æ—Ç–≤–µ—á–∞–ª –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
                logger.info(f"‚è∞ {bot_name} –∂–¥–µ—Ç 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º...")
                await asyncio.sleep(10)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                response = await self.ai_handler.generate_response(message_text, bot_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç
                if bot_name in self.last_responses and response == self.last_responses[bot_name]:
                    logger.info(f"üîÑ {bot_name} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π")
                    response = await self.ai_handler.generate_response(message_text + " (–Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç)", bot_name)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∏ –≤—Ä–µ–º—è
                self.last_responses[bot_name] = response
                self.response_times[bot_name] = current_time
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await event.reply(response)
                
                logger.info(f"üí¨ {bot_name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ Reply, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await event.reply("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ GOMINIAPP - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫. –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")
    
    async def setup_userbot1(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω
            if not BOT1_TOKEN or BOT1_TOKEN == 'your_phone1_here':
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª shlyapa1.env")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await self.client1.start(phone=BOT1_TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            # Maria –ù–ï —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ /start –∏ /stop
            # Maria –æ—Ç–≤–µ—á–∞–µ—Ç –¢–û–õ–¨–ö–û –Ω–∞ Reply
            @self.client1.on(events.NewMessage())
            async def message_handler(event):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Reply
                if event.message.reply_to is not None:
                    await self.handle_message(event)
            
            logger.info(f"‚úÖ {BOT1_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return self.client1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT1_NAME}: {e}")
            raise
    
    async def setup_userbot2(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω
            if not BOT2_TOKEN or BOT2_TOKEN == 'your_phone2_here':
                raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —é–∑–µ—Ä-–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª shlyapa1.env")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram
            await self.client2.start(phone=BOT2_TOKEN)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            @self.client2.on(events.NewMessage(pattern='/start'))
            async def start_handler(event):
                await self.start_conversation(event)
            
            @self.client2.on(events.NewMessage(pattern='/stop'))
            async def stop_handler(event):
                await self.stop_conversation(event)
            
            @self.client2.on(events.NewMessage())
            async def message_handler(event):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Reply
                if event.message.reply_to is not None:
                    await self.handle_message(event)
            
            logger.info(f"‚úÖ {BOT2_NAME} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return self.client2
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {BOT2_NAME}: {e}")
            raise 